import asyncio
import logging
import random
import re
import time
from collections import deque
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import (
    BotBlocked,
    ChatNotFound,
    MessageNotModified,
    NetworkError,
)
from dataclasses import dataclass
import aiosqlite
import string

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7083060784:AAGahUaPvGKB6tLYpMaSsD_abPUXR_I-u4s'
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MESSAGE_INTERVAL = 0.3

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_message_times = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
messages_to_edit = {}

# –ö–ª–∞—Å—Å—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
@dataclass
class FormData:
    recipient_id: Optional[int] = None
    anonymous_message: Optional[str] = None
    anonymous_reply: Optional[str] = None
    sender_id: Optional[int] = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    recipient_id = State()
    anonymous_message = State()
    anonymous_reply = State()

# –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
async def get_connection():
    return await aiosqlite.connect('database.db')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async def create_tables(conn):
    async with conn.cursor() as cursor:
        await cursor.execute('''CREATE TABLE IF NOT EXISTS users
                          (id INTEGER PRIMARY KEY, username TEXT, anonymous_id TEXT)''')
        await cursor.execute('''CREATE TABLE IF NOT EXISTS anonymous_messages
                          (message_id INTEGER PRIMARY KEY AUTOINCREMENT,
                           sender_id INTEGER,
                           recipient_id INTEGER,
                           message TEXT,
                           created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        await cursor.execute('''CREATE INDEX IF NOT EXISTS idx_sender_id ON anonymous_messages (sender_id)''')
        await cursor.execute('''CREATE INDEX IF NOT EXISTS idx_recipient_id ON anonymous_messages (recipient_id)''')
    await conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_sender_id(recipient_id, conn):
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT sender_id FROM anonymous_messages WHERE recipient_id = ? ORDER BY message_id DESC LIMIT 1", (recipient_id,))
        result = await cursor.fetchone()
        return result[0] if result else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_recipient_id(sender_id, conn):
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT recipient_id FROM anonymous_messages WHERE sender_id = ? ORDER BY message_id DESC LIMIT 1", (sender_id,))
        result = await cursor.fetchone()
        return result[0] if result else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É ID
async def get_chat_id_by_anonymous_id(anonymous_id, conn):
    async with conn.cursor() as cursor:
        await cursor.execute("SELECT id FROM users WHERE anonymous_id = ?", (anonymous_id,))
        result = await cursor.fetchone()
        return result[0] if result else None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
def check_start_command(text):
    return '/start' in text

def check_nick_command(text):
    return '/nick' in text

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ ID
def generate_anonymous_id():
    random_part = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    return f"_{random_part}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def start(message: types.Message, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (message.from_user.id,))
            result = await cursor.fetchone()

            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
            if result is None:
                anonymous_id = generate_anonymous_id()
                await cursor.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?)", 
                                    (message.from_user.id, message.from_user.username, anonymous_id))
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID
            else:
                anonymous_id = result[0]

        await conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await conn.close()

    recipient_id = message.get_args()
    if recipient_id:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É ID
        conn = await get_connection()
        try:
            recipient_chat_id = await get_chat_id_by_anonymous_id(recipient_id, conn)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —á–∞—Ç–∞: {e}")
            markup = InlineKeyboardMarkup()
            share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
            markup.add(share_button)
            await message.answer(f"<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\nüëâ t.me/Ietsqbot?start={anonymous_id}\n\n<i>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/TikTok/Instagram –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨</i>", reply_markup=markup, disable_web_page_preview=True)
            return
        finally:
            await conn.close()

        if recipient_chat_id:
            async with state.proxy() as data:
                data_obj = FormData(**data) if data else FormData()
                if data_obj.recipient_id == recipient_chat_id:
                    markup = InlineKeyboardMarkup()
                    cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
                    markup.add(cancel_button)
                    await send_anonymous_message_instructions(message.from_user.id, markup, recipient_chat_id)
                else:
                    data_obj.recipient_id = recipient_chat_id
                    markup = InlineKeyboardMarkup()
                    cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
                    markup.add(cancel_button)
                    sent_message = await message.answer("üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\nüñä <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å</b>, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã", reply_markup=markup)
                    await Form.anonymous_message.set()
                    await state.update_data(data_obj.__dict__)

                    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    messages_to_edit[sent_message.message_id] = {
                        "chat_id": message.chat.id,
                        "message_id": sent_message.message_id,
                        "recipient_id": recipient_chat_id
                    }

                    # –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    asyncio.create_task(edit_message_after_delay(sent_message.message_id, 600)) # 120 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            markup = InlineKeyboardMarkup()
            share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
            markup.add(share_button)
            await message.answer(f"<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\nüëâ t.me/Ietsqbot?start={anonymous_id}\n\n<i>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/TikTok/Instagram –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨</i>", reply_markup=markup, disable_web_page_preview=True)
            return

    else:
        user_id = message.from_user.id
        conn = await get_connection()
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
                result = await cursor.fetchone()
                anonymous_id = result[0] if result else None

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()

        markup = InlineKeyboardMarkup()
        share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
        markup.add(share_button)
        await send_share_link_message(user_id, markup, anonymous_id)

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_anonymous_message_instructions(chat_id, markup, recipient_id=None):
    try:
        sent_message = await bot.send_message(chat_id, "üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>–∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É\n\nüñä <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å</b>, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã", reply_markup=markup)

        if recipient_id:
            # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            messages_to_edit[sent_message.message_id] = {
                "chat_id": chat_id,
                "message_id": sent_message.message_id,
                "recipient_id": recipient_id
            }

            # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(edit_message_after_delay(sent_message.message_id, 600)) # 120 —Å–µ–∫—É–Ω–¥ = 2 –º–∏–Ω—É—Ç—ã

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
async def send_share_link_message(user_id, markup, anonymous_id):
    try:
        await bot.send_message(user_id, f"<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n"
                                        f"<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\nüëâ <a href='t.me/Ietsqbot?start={anonymous_id}'>t.me/Ietsqbot?start={anonymous_id}</a>\n\n"
                                        "<i>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ <b>Telegram/TikTok/Instagram</b> –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨</i>",
                               reply_markup=markup, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π
async def get_share_link_message_text(user_id):
    conn = await get_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
            result = await cursor.fetchone()
            anonymous_id = result[0] if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await conn.close()

    return f"<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n" \
           f"<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\nüëâ <a href='t.me/Ietsqbot?start={anonymous_id}'>t.me/Ietsqbot?start={anonymous_id}</a>\n\n" \
           f"<i>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ <b>Telegram/TikTok/Instagram</b> –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨</i>"

# –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def async_insert_into_db(conn, sender_id, recipient_id, message_text):
   async with conn.cursor() as cursor:
       await cursor.execute("INSERT OR REPLACE INTO anonymous_messages (sender_id, recipient_id, message) VALUES (?, ?, ?)", (sender_id, recipient_id, message_text))
   await conn.commit()

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç–∞
async def send_reply_message(recipient_id, message_text, sender_id):
   reply_markup = InlineKeyboardMarkup()
   reply_button = InlineKeyboardButton("‚úè –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{sender_id}")
   reply_markup.add(reply_button)
   try:
       await bot.send_message(recipient_id, f"<b>üîî –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n<i>{message_text}</i>", reply_markup=reply_markup)
   except ChatNotFound:
       logging.warning(f"Chat {recipient_id} not found, but continuing with other functions.")

# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def edit_message_after_delay(message_id, delay):
    await asyncio.sleep(delay)

    # –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_id in messages_to_edit:
        # –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        message_info = messages_to_edit.pop(message_id)
        chat_id = message_info["chat_id"]
        message_id = message_info["message_id"]
        recipient_id = message_info["recipient_id"]

        # –ø–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        conn = await get_connection()
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (recipient_id,))
                result = await cursor.fetchone()
                anonymous_id = result[0] if result else None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()

        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π"
        user_id = chat_id # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ message_info
        markup = InlineKeyboardMarkup()
        share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                                            url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
        markup.add(share_button)

        try:
            # –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏ message_id –∏–∑ message_info
                                        text=await get_share_link_message_text(user_id),
                                        reply_markup=markup,
                                        disable_web_page_preview=True)

            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state = dp.current_state(chat=chat_id, user=chat_id)
            await state.finish()
        except MessageNotModified: # –∏–≥–Ω–æ—Ä –æ—à–∏–±–∫—É "Message is not modified"
            pass
        except Exception as e:
            logging.error(f"Error editing message: {e}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
async def process_callback_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id

    # –ø–æ–ª—É—á–∞–µ–º anonymous_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await get_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
            result = await cursor.fetchone()
            anonymous_id = result[0] if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await conn.close()

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π 
    new_text = await get_share_link_message_text(user_id) 

    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π"
    markup = InlineKeyboardMarkup()
    share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
    markup.add(share_button)

    try:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id, text=new_text,
                                     reply_markup=markup, disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await state.finish()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c: c.data not in ['cancel', 'reply', 'send_again'], state=[Form.anonymous_message, Form.anonymous_reply])
async def handle_other_callbacks(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=False)
    return

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=Form.anonymous_message)
async def process_anonymous_message(message: types.Message, state: FSMContext):
    if check_start_command(message.text):
        markup = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        markup.add(cancel_button)
        await send_anonymous_message_instructions(message.from_user.id, markup)
        return

    try:
        async with state.proxy() as data:
            data_obj = FormData(**data)
            recipient_id = data_obj.recipient_id
            data_obj.anonymous_message = message.text
            data_obj.sender_id = message.from_user.id

        conn = await get_connection()

        # 1. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        send_message_task = asyncio.create_task(send_reply_message(recipient_id, message.text, message.from_user.id))

        # 2. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        send_success_message = await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data=f"send_again:{recipient_id}")]
                ]
            )
        )

        # 3. –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        insert_db_task = asyncio.create_task(async_insert_into_db(conn, message.from_user.id, recipient_id, message.text))

        # 4. —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        user_id = message.from_user.id
        conn = await get_connection()
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
                result = await cursor.fetchone()
                anonymous_id = result[0] if result else None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()

        markup = InlineKeyboardMarkup()
        share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
        markup.add(share_button)
        edit_message_task = asyncio.create_task(
            bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=message.message_id - 1,
                text=await get_share_link_message_text(message.from_user.id),  # –ø–µ—Ä–µ–¥–∞–µ–º user_id
                reply_markup=markup,
                disable_web_page_preview=True
            )
        )

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await asyncio.gather(send_message_task, insert_db_task, edit_message_task)

        await state.update_data(data_obj.__dict__)
        await state.finish()
    except Exception as e:
        logging.error(f"Error processing anonymous message: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë"
@dp.callback_query_handler(lambda c: c.data.startswith('send_again'), state='*')
async def process_callback_send_again(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    sender_id = callback_query.from_user.id
    conn = await get_connection()

    try:
        recipient_id = int(callback_query.data.split(':')[1])

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if await state.get_state() == Form.anonymous_message.state:
            return

        markup = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        markup.add(cancel_button)
        await send_anonymous_message_instructions(callback_query.from_user.id, markup, recipient_id)
        await Form.anonymous_message.set()
        await state.update_data({"recipient_id": recipient_id})
    except Exception as e:
        logging.error(f"Error processing send_again callback: {e}")
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda c: c.data.startswith('reply'), state='*')
async def process_callback_reply(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    recipient_id = callback_query.from_user.id
    conn = await get_connection()

    try:
        sender_id = int(callback_query.data.split(':')[1])

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        if await state.get_state() == Form.anonymous_reply.state:
            return

        markup = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        markup.add(cancel_button)
        await send_anonymous_message_instructions(callback_query.from_user.id, markup, sender_id)
        await Form.anonymous_reply.set()
        await state.update_data({"sender_id": sender_id, "recipient_id": recipient_id})

    except Exception as e:
        logging.error(f"Error processing reply callback: {e}")
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(state=Form.anonymous_reply)
async def process_anonymous_reply(message: types.Message, state: FSMContext):
    if check_start_command(message.text):
        markup = InlineKeyboardMarkup()
        cancel_button = InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        markup.add(cancel_button)
        await send_anonymous_message_instructions(message.from_user.id, markup)
        return

    try:
        async with state.proxy() as data:
            data_obj = FormData(**data)
            sender_id = data_obj.sender_id
            recipient_id = data_obj.recipient_id
            data_obj.anonymous_reply = message.text

        conn = await get_connection()

        # 1. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é)
        send_message_task = asyncio.create_task(send_reply_message(sender_id, message.text, message.from_user.id))

        # 2. –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é (–æ—Ç–≤–µ—á–∞—é—â–µ–º—É)
        send_success_message = await message.answer(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì® –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë", callback_data=f"send_again:{sender_id}")]
                ]
            )
        )

        # 3. –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        insert_db_task = asyncio.create_task(async_insert_into_db(conn, message.from_user.id, sender_id, message.text))

        # 4. —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ)
        user_id = message.from_user.id
        conn = await get_connection()
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
                result = await cursor.fetchone()
                anonymous_id = result[0] if result else None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()

        markup = InlineKeyboardMarkup()
        share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
        markup.add(share_button)
        edit_message_task = asyncio.create_task(
            bot.edit_message_text(
                chat_id=message.from_user.id,
                message_id=message.message_id - 1,
                text=await get_share_link_message_text(message.from_user.id),  # –ø–µ—Ä–µ–¥–∞–µ–º user_id
                reply_markup=markup,
                disable_web_page_preview=True
            )
        )

        await asyncio.gather(send_message_task, insert_db_task, edit_message_task)

        await state.finish()
    except Exception as e:
        logging.error(f"Error processing anonymous reply: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ nick
from nick import *

# –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ handlers
from handlers import *

dp.register_callback_query_handler(reset_nick_callback, text="reset_nick")

dp.register_message_handler(cmd_nick, commands='nick')

@dp.message_handler(commands=['adm_reck'])
async def handle_adm_reck(message: types.Message):
    conn = await get_connection()
    try:
        # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        user_ids = [960990229, 5676870593, 5078537288, 1086037596, 6570385214, 5744440784, 5184318437, 5025167065, 1100464352, 1669875937, 6880511856, 1338407880, 1351476265, 5967126152, 5598161701, 1888848862, 1490835538, 1931255824, 2118582359, 5329240621, 516951553]  # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ ID –Ω–∞ –Ω—É–∂–Ω—ã–µ

        await send_to_list(conn, user_ids)
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    finally:
        await conn.close()


async def send_to_list(conn, user_ids):
    for user_id in user_ids:
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
                result = await cursor.fetchone()
                anonymous_id = result[0] if result else None

            # –µ—Å–ª–∏ anonymous_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            if anonymous_id is None:
                anonymous_id = generate_anonymous_id()
                async with conn.cursor() as cursor:
                    await cursor.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?)", (user_id, None, anonymous_id))
                await conn.commit()

            markup = InlineKeyboardMarkup()
            share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
            markup.add(share_button)

            text = f"<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n\n<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\nüëâ <a href='t.me/Ietsqbot?start={anonymous_id}'>t.me/Ietsqbot?start={anonymous_id}</a>\n\n<i>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/TikTok/Instagram –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨</i>"
            await bot.send_message(user_id, text, reply_markup=markup, disable_web_page_preview=True)
        except (BotBlocked, ChatNotFound):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logging.error(f"Error sending message to {user_id}: {e}")

# –¥–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID –≥—Ä—É–ø–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
media_group_ids_processed = deque(maxlen=1000)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text', 'photo', 'video', 'sticker', 'voice', 'video_note', 'animation'])
async def handle_all(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_time = time.time()

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±—ã—Å—Ç—Ä–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in last_message_times:
        last_message_time = last_message_times[user_id]
        if current_time - last_message_time < MESSAGE_INTERVAL:  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            return  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ

    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_message_times[user_id] = current_time

    media_group_id = message.media_group_id
    if media_group_id is not None:
        if media_group_id in media_group_ids_processed:
            return
        else:
            media_group_ids_processed.append(media_group_id)

    conn = await get_connection()
    try:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT anonymous_id FROM users WHERE id = ?", (user_id,))
            result = await cursor.fetchone()
            anonymous_id = result[0] if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        await conn.close()

    # –µ—Å–ª–∏ anonymous_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    if anonymous_id is None:
        anonymous_id = generate_anonymous_id()
        conn = await get_connection()
        try:
            async with conn.cursor() as cursor:
                await cursor.execute("INSERT OR REPLACE INTO users VALUES (?, ?, ?)", (user_id, message.from_user.username, anonymous_id))
            await conn.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            await conn.close()

    markup = InlineKeyboardMarkup()
    share_button = InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=f"https://t.me/share/url?url=%D0%97%D0%B0%D0%B4%D0%B0%D0%B9%20%D0%BC%D0%BD%D0%B5%20%D0%B0%D0%BD%D0%BE%D0%BD%D0%B8%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%0A%F0%9F%91%89%20http://t.me/Ietsqbot?start={anonymous_id}")
    markup.add(share_button)

    await asyncio.create_task(send_share_link_message(user_id, markup, anonymous_id))

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    conn = await get_connection()
    try:
        await create_tables(conn)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
    finally:
        await conn.close()

if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    print("GO!")
    executor.start_polling(dp, skip_updates=True)
